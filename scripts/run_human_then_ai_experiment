#!/usr/bin/env python

import argparse
import os
import sys
from typing import Any

import torch

from human_bo import conf, core, reporting
from human_bo.factories import pick_test_function
from human_bo.joint_optimization import human_suggests_second
from human_bo.test_functions import sample_initial_points


def create_user(exp_conf: dict[str, Any]):
    """Creates a user model for human-then-AI experiment given experiment configurations."""
    f = pick_test_function(exp_conf["problem"])
    match exp_conf["user"]:
        case "random":
            return lambda hist, stats: (
                core.random_queries(f._bounds),
                "Random user has no stats yet.",
            )
        case "BO":
            bo_human = core.PlainBO(exp_conf["kernel"], exp_conf["acqf"], f._bounds)
            train_x_human, train_y_human, _ = sample_initial_points(
                f, f._bounds, exp_conf["n_init"], exp_conf["problem_noise"]
            )
            human = human_suggests_second.PlainJointAI(bo_human.pick_queries, train_x_human, train_y_human)
            return lambda hist, stats: (
                human.pick_queries(hist),
                "PlainJointAI user has not stats yet.",
            )

    raise KeyError(f"{exp_conf['user']} is not a valid user option.")


if __name__ == "__main__":
    torch.set_default_dtype(torch.double)

    # Add `user_model` as a configuration.
    conf.CONFIG["user"] = {
        "type": str,
        "shorthand": "u",
        "help": "The (real) user behavior",
        "tags": {"experiment-parameter"},
        "parser-arguments": {"choices": {"random", "BO"}, "default": "random"},
    }

    parser = argparse.ArgumentParser(description="Command description.")
    for arg, values in conf.CONFIG.items():
        parser.add_argument(
            "-" + values["shorthand"],
            "--" + arg,
            help=values["help"],
            type=values["type"],
            **values["parser-arguments"],
        )

    parser.add_argument("-f", "--save_path", help="Name of saving directory.", type=str)
    parser.add_argument("--wandb", help="Wandb configuration file", type=str)

    args = parser.parse_args()
    exp_conf = conf.from_ns(args)

    experiment_name = (
        "_".join(
            [
                str(v)
                for k, v in exp_conf.items()
                if "experiment-parameter" in conf.CONFIG[k]["tags"]
            ]
        )
        + "_"
        + str(exp_conf["seed"])
    )
    path = args.save_path + "/" + experiment_name + ".pt"

    if os.path.isfile(path):
        print(f"File {path} already exists, aborting run!")
        sys.exit()
    if not os.path.isdir(args.save_path):
        print(f"Save path {args.save_path} is not an existing directory")
        sys.exit()

    # Create problem.
    f = pick_test_function(exp_conf["problem"])
    problem = human_suggests_second.create_test_both_queries_problem(f, exp_conf["problem_noise"])

    # Create AI agent.
    bo = core.PlainBO(exp_conf["kernel"], exp_conf["acqf"], f._bounds)
    train_x, train_y, _ = sample_initial_points(
        f, f._bounds, exp_conf["n_init"], exp_conf["problem_noise"]
    )
    ai = human_suggests_second.PlainJointAI(bo.pick_queries, train_x, train_y)
    human = create_user(exp_conf)

    # Create result reporting
    report_step = (
        reporting.initiate_and_create_wandb_logger(args.wandb, exp_conf)
        if args.wandb
        else reporting.print_dot
    )

    # Run actual experiment.
    print(f"Running experiment for {path}")

    res: dict[str, Any] = human_suggests_second.ai_then_human_optimization_experiment(
        ai.pick_queries,
        human,
        problem,
        report_step,
        exp_conf["seed"],
        exp_conf["budget"],
    )
    res["conf"] = exp_conf

    torch.save(res, path)
